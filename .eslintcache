[{"/home/amagi/works/awesomeFrontend/components/src/index.tsx":"1","/home/amagi/works/awesomeFrontend/components/src/reportWebVitals.ts":"2","/home/amagi/works/awesomeFrontend/components/src/components/Button/ButtonDrip.tsx":"3","/home/amagi/works/awesomeFrontend/components/src/components/Button/Button.tsx":"4","/home/amagi/works/awesomeFrontend/components/src/App.tsx":"5","/home/amagi/works/awesomeFrontend/components/src/components/Toggle/index.tsx":"6","/home/amagi/works/awesomeFrontend/components/src/components/Toggle/Toggle.tsx":"7"},{"size":500,"mtime":1610281229502,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1610281229502,"results":"10","hashOfConfig":"11"},{"size":1664,"mtime":1610311216473,"results":"12","hashOfConfig":"9"},{"size":1600,"mtime":1610309389789,"results":"13","hashOfConfig":"9"},{"size":363,"mtime":1610310248848,"results":"14","hashOfConfig":"9"},{"size":53,"mtime":1610303970021,"results":"15","hashOfConfig":"9"},{"size":2470,"mtime":1610308303097,"results":"16","hashOfConfig":"9"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vdxwdp",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"gszber",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},"/home/amagi/works/awesomeFrontend/components/src/index.tsx",[],"/home/amagi/works/awesomeFrontend/components/src/reportWebVitals.ts",[],"/home/amagi/works/awesomeFrontend/components/src/components/Button/ButtonDrip.tsx",[],"/home/amagi/works/awesomeFrontend/components/src/components/Button/Button.tsx",[],"/home/amagi/works/awesomeFrontend/components/src/App.tsx",[],"/home/amagi/works/awesomeFrontend/components/src/components/Toggle/index.tsx",[],"/home/amagi/works/awesomeFrontend/components/src/components/Toggle/Toggle.tsx",["32"],"import React, { ChangeEvent, FC, useCallback, useEffect, useState } from 'react'\nimport classNames from 'classnames'\nimport { css } from '@emotion/css'\n\nconst width = '1.67rem'\nconst height = '.835rem'\nconst background = '#eaeaea'\nconst success = '#0070f3'\n\nconst toggleCls = css`\n  transition-delay: 0.12s;\n  transition-duration: 0.2s;\n  transition-property: background, border;\n  transition-timing-function: cubic-bezier(0, 0, 0.2, 1);\n  position: relative;\n  border: 1px solid transparent;\n  padding: 0;\n  height: ${height};\n  width: ${width};\n  border-radius: ${height};\n  background-color: ${background};\n`\nconst innerCls = css`\n  width: ${height};\n  height: ${height};\n  position: absolute;\n  // top: calc(50%);\n  transform: translateY(-50%);\n  transform: scale(1.6);\n  left: 1px;\n  box-shadow: rgba(0, 0, 0, 0.2) 0 1px 2px 0, rgba(0, 0, 0, 0.1) 0 1px 3px 0;\n  transition: left 280ms cubic-bezier(0, 0, 0.2, 1),\n    background-color 0.2s 0.12s cubic-bezier(0, 0, 0.2, 1);\n  border-radius: 50%;\n  background-color: ${background};\n`\nconst checkedCls = css({\n  backgroundColor: 'lightpink',\n})\nconst checkedInnerCls = css`\n  left: 50%;\n  box-shadow: none;\n  background-color: deeppink;\n`\nconst disabledCls = css({})\n\ntype ToggleProps = {\n  disabled?: boolean\n  checked?: boolean\n  initialChecked?: boolean\n}\n\nconst Toggle: FC<ToggleProps> = ({ initialChecked = false, disabled = false, checked }) => {\n  const [selfChecked, setSelfChecked] = useState(initialChecked)\n\n  const changeHandle = useCallback(\n    (ev: ChangeEvent) => {\n      if (disabled) return\n      setSelfChecked(!selfChecked)\n    },\n    [disabled, selfChecked],\n  )\n\n  useEffect(() => {\n    if (checked !== undefined) setSelfChecked(checked)\n  }, [checked])\n\n  const toggleClasses = classNames(toggleCls, {\n    [checkedCls]: selfChecked,\n    [disabledCls]: disabled,\n  })\n\n  return (\n    <label\n      className={css(`\n      display: inline-block;\n      padding: 3px 0;\n      position: relative;\n      cursor: pointer;\n    `)}>\n      <input\n        type=\"checkbox\"\n        onChange={changeHandle}\n        className={css({\n          overflow: 'hidden',\n          visibility: 'hidden',\n          height: 0,\n          width: 0,\n          opacity: 0,\n          position: 'absolute',\n          zIndex: -1,\n        })}\n      />\n      <div className={toggleClasses}>\n        <span className={classNames(innerCls, { [checkedInnerCls]: selfChecked })} />\n      </div>\n    </label>\n  )\n}\n\nexport default Toggle\n",{"ruleId":"33","severity":1,"message":"34","line":8,"column":7,"nodeType":"35","messageId":"36","endLine":8,"endColumn":14},"@typescript-eslint/no-unused-vars","'success' is assigned a value but never used.","Identifier","unusedVar"]